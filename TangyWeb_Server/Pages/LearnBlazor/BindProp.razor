@page "/learnBlazor/bindProp"

<h2 class="text-success">Individual Product</h2>
<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3><hr />


        @*add toggling checkbox functionality*@
        <div>
            Active: <input type="checkbox" @bind="product.IsActive" /><br />
        </div>
        @*one-way data binding to two-way data binding*@
        <div>
            Price : <input type="number" @bind="@product.Price" @bind:event="oninput" /><br />
        </div>
        @*dropdown binding*@
        <div>
            Product Properties:
            <select @bind="_selectedProp">
                @foreach (var prop in product.ProductProperties)
                {
                    <option value="@prop.Key">@prop.Key</option>

                }
            </select>
        </div>
    </div>
    <div class="col-6 border p-2">
        <h3 class="text-primary">Product Summary</h3><hr />
        Name: @product.Name<br />
        Active: @product.IsActive<br />
        Price : @product.Price<br />
        This Product is : @(product.IsActive? "Active":"InActive") <br />
        Product Selected: @_selectedProp <br />
        @if (!String.IsNullOrWhiteSpace(_selectedProp))
        {
            <p>Propety Value : @product.ProductProperties.FirstOrDefault(p => p.Key == _selectedProp).Value</p>

        }
    </div>


</div>
<h2 class="text-success">Product Table</h2>

<table class="table table-striped">
    <tbody>
        @foreach (var p in products)
        {
            <tr>
                <td>
                    <input type="text" @bind="p.Name" @bind:event="oninput" />
                </td>
                <td>
                    <input type="text" @bind="p.Price" @bind:event="oninput" />
                </td>
                <td>
                    <input type="checkbox" @bind="p.IsActive" />
                </td>
            </tr>
        }
    </tbody>

</table>
<br />
<br />
<h2 class="text-success">Product Summary</h2>
@foreach (var p in products)
{
    <p>@p.Name [@p.Price] is @(p.IsActive? "Active" : "Inactive")</p>
}




<div>

</div>



@code {
    private string _selectedProp = "";
    Demo_Products product = new()
    {
        Id = 1,
        Name = "Rose Candle",
        IsActive = true,
        Price = 10.99,
        ProductProperties = new List<Demo_ProductProp>()
{
                new Demo_ProductProp { Id = 1, Key = "Color", Value="Black"},
                new Demo_ProductProp { Id = 2, Key = "Flavor", Value = "Rose Jasmine" },
                new Demo_ProductProp { Id = 3, Key = "Size", Value = "20oz"},
            }
    };

    List<Demo_Products> products = new();

    protected override void OnInitialized()
    {
        products.Add(new()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            Price = 10.99,

            ProductProperties = new()
    {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Rose"},
                     new Demo_ProductProp { Id = 2, Key = "Size", Value = "20oz"},
                    new Demo_ProductProp { Id = 3, Key = "Color", Value="Purple" }
                }
        });

        products.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price = 10.99,

            ProductProperties = new()
{
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value = "Lily" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value = "18oz" },
                new Demo_ProductProp {Id = 3,Key = "Color",Value = "White"}
            }
        });
    }


}

