@page "/cart"
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject ICartService _cartService


@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    @if (!ShoppingCart.Any())
    {
        <div class="align-item purple-text">
            Please add items to shopping cart.
        </div>
    }
    else
    {
        <div class="container mt-4">
            <div class="card">
                <div class="card-header bg-light text-light ml-0 ">
                    <div class="row">
                        <div class="col-6  pt-2" style="font-size: xx-large;">
                            <span class="oi oi-cart text-black"></span>
                        </div>
                        <div class="col-6 col-md-3 offset-md-3 text-end align-item">
                            <a href="/" class="custom-btn form-control">Continue Shopping</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">

                    @foreach (var item in ShoppingCart)
                    {

                        <div class="row">
                            <div class="col-3 col-md-1 text-center py-2">
                                <img src="@item.Product.ImageUrl" class="rounded" width="100%" />
                            </div>
                            <div class="col-9 text-sm-center text-md-start col-md-4 pt-lg-1 text-black">
                                <h4><strong>@item.Product.Name</strong></h4>

                                <div class="badge custom-tag text-center" style="font-size:12px;">
                                    @item.Product.Category.Name
                                </div>
                                <div class="badge custom-tag text-center" style="font-size:12px;">
                                    @item.Product.Color
                                </div>
                                <div><p>Size : @item.ProductPrice.Size</p></div>
                            </div>
                            <div class="col-12 text-sm-center col-md-7 text-md-start row  pt-lg-3 mt-3">
                                <div class="col-4 pt-1 ">

                                    <h6><strong>@item.ProductPrice.Price.ToString("C", new CultureInfo("en-GB")) <span class="text-muted">x</span> @item.Count </strong></h6>
                                </div>
                                <div class="col-6 col-sm-4 col-lg-6">
                                    <button @onclick="()=>Increment(item.ProductId,item.ProductPriceId,1)" type="submit" class="btn btn-primary">
                                        <i class="bi bi-plus-square"></i>
                                    </button>
                                    <button @onclick="()=>Decrement(item.ProductId,item.ProductPriceId,1)" type="submit" class="btn btn-warning">
                                        <i class="bi bi-dash-square"></i>
                                    </button>
                                </div>
                                <div class="col-2 col-sm-4 col-lg-2 text-right">
                                    <button @onclick="()=>Decrement(item.ProductId,item.ProductPriceId,0)" type="submit" class="btn btn-outline-danger">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    <hr />

                    <div class="row">
                        <div class="col-12 col-md-5">
                        </div>
                        <div class="col-12 col-md-6 offset-md-1 col-lg-4 offset-lg-3 pr-4">
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between bg-light">
                                    <span class="purple-text"> Total (GBP)</span>
                                    <strong class="purple-text">@OrderTotal.ToString("C", new CultureInfo("en-GB"))</strong>
                                </li>
                            </ul>
                        </div>
                    </div>


                </div>
                <div class="card-footer">
                    <div class="col-12  col-md-3 offset-md-9">
                        <a href="/summary" class="custom-btn form-control">Summary</a>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code {
    public bool IsProcessing { get; set; } = false;
    private List<ShoppingCartVM> ShoppingCart = new List<ShoppingCartVM>();
    private IEnumerable<ProductDTO> Products { get; set; }
    private double OrderTotal { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

        IsProcessing = true;
        Products = await _productService.GetAll();
        await LoadCart();



        IsProcessing = false;
    }

    private async Task LoadCart()
    {
        OrderTotal = 0;
        var localStorageShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCartVM>>(SD.ShoppingCart);
        if (localStorageShoppingCart != null)
            ShoppingCart = localStorageShoppingCart;


        foreach (var cart in ShoppingCart)
        {
            cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
            cart.ProductPrice = cart.Product.ProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
            OrderTotal += (cart.ProductPrice.Price * cart.Count);
        }
    }

    private async Task Increment(int ProductId, int ProductPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.IncrementCart(new()
        {
            Count = Count,
            ProductId = ProductId,
            ProductPriceId = ProductPriceId
        });

        await LoadCart();
        IsProcessing = false;
    }

    private async Task Decrement(int ProductId, int ProductPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.DecrementCart(new()
        {
            Count = Count,
            ProductId = ProductId,
            ProductPriceId = ProductPriceId
        });

        await LoadCart();
        IsProcessing = false;
    }
}